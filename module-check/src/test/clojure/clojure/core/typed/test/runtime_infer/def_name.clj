(ns clojure.core.typed.test.runtime-infer.def-name
  {:lang :core.typed
   :core.typed {:features #{:runtime-infer}}
   }
  (:require [clojure.core.typed :as t]
            [clojure.pprint :refer [pprint]]
            [clojure.spec :as s]))

;; Start: Generated by clojure.core.typed - DO NOT EDIT
(declare sec-qua-ene-is_-shi-ext-alias)
(t/defalias
  sec-qua-ene-is_-shi-ext-alias
  (t/HMap
    :mandatory
    {:sector (t/Vec Long),
     :quadrant (t/Vec Long),
     :energy Long,
     :is_docked Boolean,
     :shields Long}
    :optional
    {:extra Long}))
(t/ann
  game-over-success
  [(t/Atom1
     (t/U sec-qua-ene-is_-shi-ext-alias (t/Map t/Nothing t/Nothing)))
   :->
   nil])
;; End: Generated by clojure.core.typed - DO NOT EDIT
(defn game-over-success [game-state]
  (reset! game-state {:sector [1 2]
                      :quadrant [3 2]
                      :energy 33
                      :is_docked false
                      :shields 343})
  (reset! game-state {:extra 1
                      :sector [1 2]
                      :quadrant [3 2]
                      :energy 33
                      :is_docked false
                      :shields 343})
  (swap! game-state assoc :is_docked true)
  nil)

(game-over-success (atom {}))